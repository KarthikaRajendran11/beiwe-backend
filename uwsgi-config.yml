uwsgi:
  http: :8000
  wsgi-file: wsgi.py 
  master: true 
  
  # %k automatically detects the number of cpu cores
  processes: %( %k + %k )

  # While uwsgi respects this setting and uses additional threads, it doesn't appear to have much
  # effect on the maximum load a server is able to handle. (Tested with one thread on a high traffic
  # server and there was no difference in quantity or rate of requests handled.)
  threads: 10

  # It is possible to hit connection count limit issues on heavily loaded servers with more than 2
  # cpu cores. uwsgi logs a message like "uWSGI listen queue of socket ... (fd: 3) full !!!" when
  # this occurs. The default value is 100, values greater than 128 requires we run the command
  # sysctl -w net.core.somaxconn=1024 in our deployment commands
  listen: 1024
  
  # enabled as an attempt to improve 502 timeouts, unclear if there is any effect.
  # there appears to be no effect
  http-keepalive: true

  # default timeout is 60 or 30 seconds, the better solution is to stream data on a case by case
  # basis, but in general we want to support long timeouts.  There are a lot of timeout options...
  http-timeout: 120
  # ah, "harakiri" is seppuku; this is the thread recycle timeout.
  harakiri: 120

  # wsgi logging is only useful for specific debugging scenarios, we already have request logging
  # from apache and print statements from python.
  disable-logging: true

  reload-mercy: 5